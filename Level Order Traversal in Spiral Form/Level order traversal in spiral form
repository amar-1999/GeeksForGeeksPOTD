Level order traversal in spiral form

Given a binary tree and the task is to find the spiral order traversal of the tree.

Spiral order Traversal mean: Starting from level 0 for root node, for all the even levels we print the node's value from right to left and for all the odd levels we print the node's value from left to right.

For below tree, function should return 1, 2, 3, 4, 5, 6, 7.

```
          1
       /     \
     2         3
   /   \     /   \
  7     6   5     4
```

Example 1:

Input:
1
/ \
 3 2
Output:1 3 2

Example 2:

Input:
10
/ \
 20 30
/ \
 40 60
Output: 10 20 30 60 40
Your Task:
The task is to complete the function findSpiral() which takes root node as input parameter and returns the elements in spiral form of level order traversal as a list. The newline is automatically appended by the driver code.
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= Number of nodes <= 105
0 <= Data of a node <= 105

C++ Solution:

//Function to return a list containing the level order traversal in spiral form.
vector<int> findSpiral(Node \*root)
{
//Your code here
vector<int> result;
if (root == NULL)
return result;

    int h = 0;
    queue<Node*> q;
    q.push(root);
    stack<int> s;

    while (!q.empty()) {
        int size = q.size();
        while (size--) {
            Node* t = q.front();
            q.pop();

            if (h % 2 != 0 && h != 0) {
                result.push_back(t->data);
            } else {
                s.push(t->data);
            }

            if (t->left)
                q.push(t->left);
            if (t->right)
                q.push(t->right);
        }

        while (!s.empty()) {
            result.push_back(s.top());
            s.pop();
        }

        h++;
    }

    return result;

}

Java Solution:

//Function to return a list containing the level order traversal in spiral form.

public class Solution {
// Function to return a list containing the level order traversal in spiral form.
public ArrayList<Integer> findSpiral(Node root) {
ArrayList<Integer> result = new ArrayList<>();
if (root == null)
return result;

        int h = 0;
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        Stack<Integer> s = new Stack<>();

        while (!q.isEmpty()) {
            int size = q.size();
            while (size-- > 0) {
                Node t = q.poll();

                if (h % 2 != 0 && h != 0) {
                    result.add(t.data);
                } else {
                    s.push(t.data);
                }

                if (t.left != null)
                    q.add(t.left);
                if (t.right != null)
                    q.add(t.right);
            }

            while (!s.isEmpty()) {
                result.add(s.pop());
            }

            h++;
        }

        return result;
    }

}

Python Solution:

#Function to return a list containing the level order traversal in spiral form.
def findSpiral(root):
result = []
if not root:
return result

    h = 0
    queue = [root]
    stack = []

    while queue:
        level_size = len(queue)
        while level_size > 0:
            node = queue.pop(0)

            if h % 2 != 0 and h != 0:
                result.append(node.val)
            else:
                stack.append(node.val)

            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)

            level_size -= 1

        while stack:
            result.append(stack.pop())

        h += 1

    return result

Javascript Solution:

//Function to return a list containing the level order traversal in spiral form.
const findSpiral = (root) => {
const result = [];
if (!root) return result;

let h = 0;
const queue = [root];
const stack = [];

while (queue.length > 0) {
const levelSize = queue.length;
while (levelSize > 0) {
const node = queue.shift();

      if (h % 2 !== 0 && h !== 0) {
        result.push(node.val);
      } else {
        stack.push(node.val);
      }

      if (node.left) queue.push(node.left);
      if (node.right) queue.push(node.right);

      levelSize--;
    }

    while (stack.length > 0) {
      result.push(stack.pop());
    }

    h++;

}

return result;
};
